### 

The *Sample Approvals* application uses a copy of the data from the familiar EMP table and includes the following APEX components:

#### Task Definitions

- *Job Change* 
  - configures its participants at design time,
  - computes its due date using an interval to be 2 days after task creation  
  - defines one parameter P_NEW_JOB, and
  - contains actions to: 
    - update the JOB column of the appropriate employee in the EBA_DEMO_APPR_EMP table, and
    - conditionally send an email notification when the task is approved
- *Salary Change* 
  - determines its participants dynamically at task creation time by invoking PL/SQL functions in the EBA_DEMO_APPR package
  - computes its due date using an interval to be 7 days after task creation
  - defines one parameter P_PROPOSED_SALARY and
  - contains an action to: 
    - update the SAL column of the appropriate employee in the EBA_DEMO_APPR_EMP table, and
    - insert a row in the EBA_DEMO_APPR_SAL_HISTORY table

- *Laptop Request* 
  - determines its administrator at design time and its approvers dynamically at task creation time by invoking a PL/SQL function in the EBA_DEMO_APPR package that accepts :APEX$TASK_RENEWAL_COUNT as a parameter to determine whether to assign JANE, STEVE, or BO
  - computes its due date using a DBMS_SCHEDULER expression to be 2 minutes after task creation (to demonstrate task expiration without having to wait too long)
  - contains actions to: 
    - conditionally send an email notification one minute before the task will expire
    - update the STATUS column of the appropriate row in the EBA_DEMO_APPR_LAPTOP_REQUESTS table when the task is approved or rejected

#### Pages

- *Home* - provides an overview of the approvals feature
- *More Information* - this page
- *Employees* - allows users to initiate a salary or job change for an employee
- *Request Salary Change* - accepts new proposed salary and creates a new instance of the *Salary Change* task using the *Human Task - Create* process
- *Request Job Change* - accepts the new proposed job and creates a new instance of the *Job Change* task using the *Human Task - Create* process
- *Request Laptop* - accepts the new laptop type, need by date, inserts them into EBA_DEMO_APPR_LAPTOP_REQUESTS using the *Form - Automatic Row Processing (DML)* process, and then creates a new instance of the *Laptop Request* task using the *Human Task - Create* process
- *Task Details* [Generated]
  - Supports participant conversations about an approval in progress, requests for more information, shows history of the approval process, and allows approving, rejecting, or delegating a task. Used for Job Change and Laptop Request tasks in this sample.
- *Salary Change Details* [Generated + Customized]
  - Customized to include graph of employee salary history and percentage change in salary. This illustrates how task definitions need only capture the absolute essential information specific to the task (e.g. P_NEW_SALARY) and can easily query and join with any system of record tables using the task's DETAIL_PK value to present application-specific details of relevance to the task approver. Supports participant conversations about an approval in progress, shows history of the approval process, and allows approving, rejecting, or delegating a task.
- *My Approvals* [Generated] - shows approvers tasks awaiting their approval
- *My Requests* [Generated] - shows current user job- or salary-change requests they sent for approval
- *Administer Approvals* [Generated] - shows business admins tasks they can (re)assign to approvers
- *Pending Approvals* - useful for showing any open, unassigned, assigned, or expired tasks awaiting approval
  - Uses the APEX_TASKS and APEX_APPL_TASKDEFS views in its SQL query to retrieve information about the pending tasks including the DETAILS_LINK_TARGET page for the task, and calls the details_task_url() function in the eba_demo_appr package to substitute the &APP_ID. and &TASK_ID. parameters in that URL.
- *Laptop Orders* - allows backoffice staff to enter order date and deliver date for approved laptop requests
- *Setup* - shows a list of setup activities
  - *Approvers* - allows managing dynamic Salary Change participants optionally based on job code and/or minimum salary
    - *Test Approver Assignment* - allows testing the dynamic Salary Change participant assignment 
  - *Email Settings* - allows configuring an email address user preference for Job Change task's email notification
  - *Manage Sample Data* - allows you to reset the sample data back to its original state
  - *Theme Style Selection* - allows the user to change the application's UI theme
- *Help* - Explains how to request and approve salary and job changes.

#### Email Template

- *Job Change Notification* used by the Job Change task when sending an email notification

### Using the Sample

This section explains how to setup and use the sample.

#### Supporting Objects

The sample's supporting object's script creates the EBA_DEMO_APPR_EMP, EBA_DEMO_APPR_DEPT, EBA_DEMO_APPR_SAL_HISTORY and EBA_DEMO_APPR_APPROVERS tables as well as the EBA_DEMO_APPR package containing application-specific PL/SQL code and the EBA_DEMO_APPR_DATA package for installing the sample data. It also contains a deinstallation script that will drop these tables and packages if you delete the application and check the *Deinstall Supporting Objects* checkbox. Any task instances created by the sample app are deleted
when the sample application is deinstalled.

#### Sample Application User Accounts

Any user can request the change of an employee's salary or job, but the sample application assumes you have created the following APEX users in your workspace that are related to the approval and administration of the created *Salary Change* and *Job Change* tasks: *BO*, *JANE*, *PAT*, *STEVE*

If any of the required sample accounts are missing, then *Home* page of the sample lets you know which sample user accounts need to be created. 

#### Requesting a Salary or Job Change or Laptop Request

To request the change of an employee's salary or job, navigate to the *Employees* page. A cards region displays all the employees with a select list at the top allowing you to sort the list by Name, Job, or Salary. Click the *(Edit Salary)* or *(Edit Job)* buttons to request a change to Salary or Job, respectively.  Click the *(Laptop)* button to request a laptop for the employee.

In the *Request Job Change* or *Request Salary Change* modal dialog, enter the new proposed job or salary as appropriate, and click *Submit*.

In the *Request Laptop* modal dialog, enter the desired laptop type and "Need By" date, and click *Submit*.

Once there is a pending change request for salary or job for a specific employee, or a pending laptop request, the related request button for that is no longer shown for the employee involved until the task is approved or rejected. In the case of the laptop request, the button is not shown until the pending laptop request is rejected, or else the approved laptop request has a Delivered Date entered.

![readme_employees](#APP_FILES#readme_employees2.jpg)

Navigating to the *Pending Approvals* page, you can see any open, unassigned or assigned approval tasks and optionally click on their subject to review the task details. You will also see any tasks that have expired and no longer can be automatically renewed (requiring manual intervention by the task business administrator). If the task is assigned, the *Status* column shows "Assigned to USER". If the task is unassigned, it shows the two or more potential approvers like this "Unassigned (USER1, USER2)". If the task is expired, it shows "Expired after " and the chain of expired approver names. This page queries information from the combination of the APEX_TASKS and APEX_TASK_PARTICIPANTS views. Using the information about the approver and admins shown in this page, you know which user to login as to be able to approve or administer the tasks using the appropriate unified task list page.

#### Which Users Can Approve or Administer Tasks?

This section helps you understand which users can approve the Job Change and Salary Change tasks in the sample.

##### Job Change Task Approvers and Admins

The *Job Change* task definition configures its task participants at design time as follows:

- Approvers: BO, JANE, STEVE
- Admins: PAT

Note that in the APEX Task Definition page approvers are called *Potential Owners* in the Participants section, and admins are called *Business Administrators*.

##### Salary Change Task Approvers and Admins

The Salary Change task definition configures its task participants dynamically by calling a PL/SQL package function, passing in bind variables representing the primary key of the application data row related to the task (:APEX$TASK_PK), the employee's current job (:JOB), and the task parameter representing the proposed new salary (:P_NEW_SALARY):

- Approvers: eba_demo_appr.get_approver_for('SALARY_CHANGE', :APEX$TASK_PK, :JOB, :P_NEW_SALARY)
- Admins: eba_demo_appr.get_admin_for('SALARY_CHANGE', :APEX$TASK_PK, :JOB, :P_NEW_SALARY)

Note that the :JOB bind variable is referencing information from the task definition's *Action SQL Query* that allows any task to retrieve any relevant data required to process the task participant assignment and/or task actions. The *Salary Change* task definition configures the following *Action SQL Query* the includes the JOB column, among others. These *Action SQL Query* columns can also be referenced as substitution variables using the &JOB. syntax in the task subject, task email template parameter values, and other task-related property values.

- select ename, sal, initcap(ename) as initcap_ename, job
  from eba_demo_appr_emp where empno = :APEX$TASK_PK

The get_approver_for() and get_admin_for() functions return one or more user names in a comma-separated string depending on the rows you have configured in the EBA_DEMO_APPR_APPROVERS table. See the Configuring Salary Change Approvers section below for more information on how to do that and how the dynamic approver and admin assignment works.

##### Laptop Request Task Approvers and Admins

The *Laptop Request* task definition configures its business admin at design time and its approvers at runtime as follows: 

- Approvers: eba_demo_appr.get_laptop_approver(:APEX$TASK_RENEWAL_COUNT)
- Admins: PAT

The implementation of the get_laptop_approver function() first assigns JANE as the owner. If the task has expired and is being renewed for the first time it assigns STEVE as the owner. And if the task is being renewed for the second time, it assigns BO as the owner.

#### Approving a Task

As noted above, JANE is one of three users configured as an approver for a *Job Change* task. So, if you logout and login to the sample application as user JANE and visit the *Approvals* page, you'll see any pending tasks awaiting her attention:

![readme_approvals](#APP_FILES#readme_approvals.jpg)

Notice the task is unassigned because there were multiple available approvers. The task will appear in each of their unified task lists until one of them approves or rejects the task, or else claims ownership of it while they are considering the requested change. JANE can directly click *Approve* or *Reject* from this task list, or click on the task subject line to open the *Task Details* page where she can add comments, review the task history, and claim ownership of the task.

#### Task Actions On Approval

The *Salary Change* task definition configures an action to fire on the task's COMPLETE event, when the outcome is APPROVED. The action executes a single SQL UPDATE statement that changes the SAL column on the appropriate EBA_DEMO_APPR_EMP table row to the new value proposed by the current task (stored during the life of the task in the P_NEW_SALARY parameter).

- update eba_demo_appr_emp set sal = :P_NEW_SALARY where empno = :APEX$TASK_PK;

The *Job Change* task definition configures two actions to fire on the task's COMPLETE event, when the outcome is APPROVED. The first action in sequence order executes a single SQL UPDATE statement that changes the JOB column on the appropriate EBA_DEMO_APPR_EMP table row to the new value proposed by the current task (stored during the life of the task in the P_NEW_JOB parameter).

- update eba_demo_appr_emp set job = :P_NEW_JOB where empno = :APEX$TASK_PK;

The second action in the task definition sends a notification email based on the *Job Notification Change* email template about the approved change. The email notification is sent only if the application item DEMO_NOTIFICATION_EMAIL is not null. This item's value is computed from an application setting of the same name that is configured using the *Administration* > *Email Settings* page in the sample. This illustrates not only the ability to send template-based email notification, but also how task actions can be conditional based on evaluating a server side condition.

The *Laptop Request* task definition configures one action to fire on the task's COMPLETE event, regardless of whether the outcome is APPROVED or REJECTED. The action updates the STATUS column in the EBA_DEMO_APPR_LAPTOP_REQUESTS table with the outcome, and sets the DECISION_DATE, and APPROVER columns as the same time:

- update eba_demo_appr_laptop_requests
  set status = upper(:APEX$TASK_OUTCOME),
  decision_date = sysdate,
  approver = :APEX$TASK_OWNER
  where id = :APEX$TASK_PK;

The second action in the task definition sends a notification email to warn about the impending expiration of the task that requires their attention for approval. The email notification is sent only if the application item DEMO_NOTIFICATION_EMAIL is not null. This item's value is computed from an application setting of the same name that is configured using the *Administration* > *Email Settings* page in the sample. This illustrates not only the ability to send email notification, but also how task actions can be conditional based on evaluating a server side condition.

### Configuring Salary Change Approvers

The *Setup* > *Salary Change Approvers* page in the sample allows you to see and change the rows in the EBA_DEMO_APPR_APPROVERS table used by the eba_demo_appr.get_approver_for(...) and eba_demo_appr.get_admin_for(...) functions that the *Salary Change* task definition uses to dynamically determine the approvers and admins at task creation time. The task participants are computed each time a *Salary Change* task instance is created and can be queried using the combination of the APEX_TASK and APEX_TASK_PARTICIPANTS views. The *About this page* box at the top of the page explains the approach used by the application business logic to determine which usernames to return. The interactive grid below allows you to edit the contents of the approver table's information.

![readme_salapprovers](#APP_FILES#readme_salapprovers.jpg)

After clicking *Save* to make any changes you've made to the approvers table permanent, you can click the *Test Salary Approver Assignment...* button to test the assignment rules. For example, requesting a salary change to 5500 for an employee like BLAKE whose job is MANAGER will result in having approvers BO or STEVE and an admin user PAT. The user STEVE is included because the job code of MANAGER is one of the codes (and happens to be the only one) in STEVE's *Job Codes* column and the proposed salary is over the 3000 value in his *Minimum Salary* column. The user BO is included because MANAGER is one of the codes in BO's *Job Codes* column. Despite having MANAGER in her list of *Job Codes*, the user JANE is not included because JANE is the current user and company policy imposes that the same user cannot approve a request that she herself requested. So the business logic excludes the task initiator from the list of approvers.   

If you experiment with the data in the *Salary Change Approvers* page, and do so in a way that produces no matching Admin or no matching Approver for a salary change, then you'll see an appropriate error message explaining that either admin or approver could not be assigned. A similar error will be displayed from the *Request Salary Change* page on clicking *Submit* if you have left the salary approver data in this state.

One solution to this situation is to return to the *Setup* > *Salary Change Approvers* page and add/edit the rows to ensure there is at least one Admin and at least one Approver defined. Another solution is to use the *Administration* > *Manage Sample Data* page to reset the sample data back to its original state.